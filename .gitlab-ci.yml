image: docker:latest

services:
  - docker:dind

stages:
  - base
  - llvm
  - mesa
  - tests

variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  CCACHE_DIR: $CI_PROJECT_DIR/../ccache
  LLVM: "4.0"
  DEBUG: "false"
  TEST_BRANCH: "test/18.1"

cache:
  paths:
    - ccache/
  key: "$CI_JOB_STAGE"

before_script:
  - mkdir -p ccache
  - rm -fr ../ccache
  - mv ccache ../
  - export MAKEFLAGS=-j$(nproc)
  - apk --no-cache add libc6-compat curl jq
  - wget https://github.com/grammarly/rocker/releases/download/1.3.1/rocker-1.3.1-linux_amd64.tar.gz
  - tar xvf rocker-1.3.1-linux_amd64.tar.gz
  - rm rocker-1.3.1-linux_amd64.tar.gz
  - mv rocker ..
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY

after_script:
  - mv ../ccache ./

base:
  stage: base
  script:
    - DOCKERFILE_SHA256=$(cat gitlab-ci/Rockerfile.base | sha256sum | cut -c-64)
    - IMAGE_DOCKERFILE_SHA256=$(./gitlab-ci/inspect-remote-image.sh gitlab-ci-token $CI_BUILD_TOKEN $CI_PROJECT_PATH "base" ".config.Labels[\"dockerfile.sha256\"]" || echo -n "<notfound>")
    - if [ "$DOCKERFILE_SHA256" != "$IMAGE_DOCKERFILE_SHA256" ] || [ "$CI_PIPELINE_SOURCE" == "schedule" ] ; then FORCE_BUILD=true ; fi
    - if [ "$FORCE_BUILD" ] ; then ../rocker build -f gitlab-ci/Rockerfile.base --var DOCKERFILE_SHA256=$DOCKERFILE_SHA256 ; fi
    - if [ "$FORCE_BUILD" ] ; then docker push $CI_REGISTRY_IMAGE:base ; fi

.build_llvm: &build_llvm
  stage: llvm
  cache: {}
  script:
    - DOCKERFILE_SHA256=$(cat gitlab-ci/Rockerfile.base gitlab-ci/Rockerfile.llvm | sha256sum | cut -c-64)
    - IMAGE_DOCKERFILE_SHA256=$(./gitlab-ci/inspect-remote-image.sh gitlab-ci-token $CI_BUILD_TOKEN $CI_PROJECT_PATH "llvm-$LLVM" ".config.Labels[\"dockerfile.sha256\"]" || echo -n "<notfound>")
    - if [ "$DOCKERFILE_SHA256" != "$IMAGE_DOCKERFILE_SHA256" ] || [ "$CI_PIPELINE_SOURCE" == "schedule" ] ; then FORCE_BUILD=true ; fi
    - if [ "$FORCE_BUILD" ] ; then ../rocker build -f gitlab-ci/Rockerfile.llvm --var DOCKERFILE_SHA256=$DOCKERFILE_SHA256 --var LLVM=$LLVM; fi
    - if [ "$FORCE_BUILD" ] ; then docker push $CI_REGISTRY_IMAGE:llvm-$LLVM ; fi

.build_mesa: &build_mesa
  stage: mesa
  except:
    - schedules
  script:
    - ../rocker build -f gitlab-ci/Rockerfile.mesa --var BUILD=$BUILD --var LLVM=$LLVM --var DEBUG=$DEBUG --var TAG=$CI_COMMIT_REF_SLUG .

.build_testsuite: &build_testsuite
  stage: tests
  cache: {}
  except:
    - schedules
  before_script: []
  after_script: []
  script:
    - apk --no-cache add curl
    - if [ "${PROJECT_ID}" ] ; then curl -X POST -F "token=${CI_JOB_TOKEN}" -F "ref=${TEST_BRANCH}" -F "variables[MESA_VERSION]=${CI_COMMIT_REF_SLUG}" https://gitlab.com/api/v4/projects/${PROJECT_ID}/trigger/pipeline ; fi

tests:piglit:
  variables:
    PROJECT_ID: $PIGLIT_PROJECT_ID
  <<: *build_testsuite

tests:gl-cts:
  variables:
    PROJECT_ID: $VK_GL_CTS_PROJECT_ID
    TEST_BRANCH: "test/gl/18.1"
  <<: *build_testsuite

tests:vk-cts:
  variables:
    PROJECT_ID: $VK_GL_CTS_PROJECT_ID
    TEST_BRANCH: "test/vk/18.1"
  <<: *build_testsuite

tests:crucible:
  variables:
    PROJECT_ID: $CRUCIBLE_PROJECT_ID
  <<: *build_testsuite

llvm:
  <<: *build_llvm

autotools:debug:
  variables:
    BUILD: "autotools"
    DEBUG: "true"
  after_script:
    - mv ../ccache ./
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  <<: *build_mesa
