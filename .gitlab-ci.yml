#image: docker:latest
image: docker:18-git

services:
#  - docker:dind
  - docker:18-dind

stages:
  - base
  - llvm
  - mesa
  - tarball
  - tests

variables:
  DOCKER_IMAGE: ${CI_REGISTRY_IMAGE}
  CCACHE_DIR: ${CI_PROJECT_DIR}/../ccache
  LLVM: "7"
  TEST_BRANCH: "test/19.1"
  MESA_REFERENCE: released-19-1-7
  TEST_REFERENCE: test-19-1

cache:
  paths:
    - ccache/
  key: "${CI_JOB_NAME}"

before_script:
  - mkdir -p ccache
  - rm -fr ../ccache
  - mv ccache ../
  - export MAKEFLAGS=-j$(nproc)
  - apk --no-cache add libc6-compat curl jq
  - wget https://github.com/grammarly/rocker/releases/download/1.3.1/rocker-1.3.1-linux_amd64.tar.gz
  - tar xvf rocker-1.3.1-linux_amd64.tar.gz
  - rm rocker-1.3.1-linux_amd64.tar.gz
  - mv rocker ..
  - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}

after_script:
  - mv ../ccache ./

.build_llvm:
  stage: llvm
  cache: {}
  script:
    - DOCKERFILE_SHA256=$(cat gitlab-ci/Rockerfile.base gitlab-ci/Rockerfile.llvm | sha256sum | cut -c-64)
    - IMAGE_TAG=${CI_COMMIT_REF_SLUG}-llvm-${LLVM}
    - IMAGE_DOCKERFILE_SHA256=$(./gitlab-ci/inspect-remote-image.sh gitlab-ci-token ${CI_BUILD_TOKEN} ${CI_PROJECT_PATH} {$IMAGE_TAG} ".config.Labels[\"dockerfile.sha256\"]" || echo -n "<notfound>")
    - if [ "${DOCKERFILE_SHA256}" != "${IMAGE_DOCKERFILE_SHA256}" ] ; then FORCE_BUILD=true ; fi
    - if [ "${FORCE_BUILD}" ] ; then ../rocker build -f gitlab-ci/Rockerfile.llvm --pull --var DOCKERFILE_SHA256=${DOCKERFILE_SHA256} --var LLVM=${LLVM} ; fi
    - if [ "${FORCE_BUILD}" ] ; then docker push ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} ; fi

.build_mesa:
  stage: mesa
  script:
    - ../rocker build -f gitlab-ci/Rockerfile.mesa --pull --var BUILD=${BUILD} --var LLVM=${LLVM} --var DRI_DRIVERS=${DRI_DRIVERS} --var GALLIUM_DRIVERS=${GALLIUM_DRIVERS} --var VULKAN_DRIVERS=${VULKAN_DRIVERS} .

.build_tarball:
  stage: tarball
  needs: ["release"]
  dependencies:
    - release
  script:
    - tar -xf release-output/mesa-*.tar.xz
    - ../rocker build -f gitlab-ci/Rockerfile.mesa --pull --var BUILD=${BUILD} --var LLVM=${LLVM} --var DRI_DRIVERS=${DRI_DRIVERS} --var GALLIUM_DRIVERS=${GALLIUM_DRIVERS} --var VULKAN_DRIVERS=${VULKAN_DRIVERS} mesa-*

.build_testsuite:
  stage: tests
  cache: {}
  needs: ["meson"]
  variables:
    GIT_STRATEGY: none
  before_script: []
  after_script: []
  script:
    - apk --no-cache --upgrade add curl
    - if [ "${CI_COMMIT_REF_NAME%%/*}" != "released" ] ; then SET_TEST_REFERENCE="-F variables[TEST_REFERENCE]=${MESA_REFERENCE}_${TEST_REFERENCE}" ; fi
    - if [ "${PROJECT_ID}" ] ; then curl -X POST -F "token=${CI_JOB_TOKEN}" -F "ref=${TEST_BRANCH}" -F "variables[MESA_VERSION]=${CI_COMMIT_REF_SLUG}" ${SET_TEST_REFERENCE} https://gitlab.com/api/v4/projects/${PROJECT_ID}/trigger/pipeline ; fi

.build_game:
  stage: tests
  needs: ["meson"]
  variables:
    DOCKER_IMAGE: ${CI_REGISTRY_IMAGE}/${GAME}
  script:
    ../rocker build -f gitlab-ci/Rockerfile.${GAME} --pull .
  after_script:
    - mv ../ccache ./
    - docker push ${DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}

base:
  stage: base
  script:
    - DOCKERFILE_SHA256=$(cat gitlab-ci/Rockerfile.base | sha256sum | cut -c-64)
    - IMAGE_TAG=${CI_COMMIT_REF_SLUG}-base
    - IMAGE_DOCKERFILE_SHA256=$(./gitlab-ci/inspect-remote-image.sh gitlab-ci-token ${CI_BUILD_TOKEN} ${CI_PROJECT_PATH} ${IMAGE_TAG} ".config.Labels[\"dockerfile.sha256\"]" || echo -n "<notfound>")
    - if [ "${DOCKERFILE_SHA256}" != "${IMAGE_DOCKERFILE_SHA256}" ] ; then FORCE_BUILD=true ; fi
    - if [ "${FORCE_BUILD}" ] ; then ../rocker build -f gitlab-ci/Rockerfile.base --pull --var DOCKERFILE_SHA256=${DOCKERFILE_SHA256} ; fi
    - if [ "${FORCE_BUILD}" ] ; then docker push ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} ; fi

llvm:3.9:
  extends: .build_llvm
  variables:
    LLVM: "3.9"

llvm:4.0:
  extends: .build_llvm
  variables:
    LLVM: "4.0"

llvm:5.0:
  extends: .build_llvm
  variables:
    LLVM: "5.0"

llvm:6.0:
  extends: .build_llvm
  variables:
    LLVM: "6.0"

llvm:7:
  extends: .build_llvm
  variables:
    LLVM: "7"

llvm:8:
  extends: .build_llvm
  variables:
    LLVM: "8"

llvm:9:
  extends: .build_llvm
  variables:
    LLVM: "9"

meson:
  extends: .build_mesa
  needs: ["llvm:7"]
  variables:
    BUILD: "meson"
    DRI_DRIVERS: "i915,i965,nouveau,r100,r200"
    GALLIUM_DRIVERS: "etnaviv,freedreno,iris,kmsro,lima,nouveau,panfrost,r300,r600,radeonsi,svga,swr,swrast,tegra,v3d,vc4,virgl"
    VULKAN_DRIVERS: "amd,freedreno,intel"
  after_script:
    - mv ../ccache ./
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}

release:
  extends: .build_mesa
  needs: ["llvm:7"]
  variables:
    BUILD: "release"
    DRI_DRIVERS: "i915,i965,nouveau,r100,r200"
    GALLIUM_DRIVERS: "etnaviv,freedreno,iris,kmsro,lima,nouveau,panfrost,r300,r600,radeonsi,svga,swr,swrast,tegra,v3d,vc4,virgl"
    VULKAN_DRIVERS: "amd,freedreno,intel"
  artifacts:
    name: "release"
    paths:
      - release-output/
    expire_in: 1 week

dri:
  extends: .build_mesa
  needs: ["llvm:7"]
  variables:
    BUILD: "meson"
    DRI_DRIVERS: "i915,i965,nouveau,r100,r200,swrast"
    GALLIUM_DRIVERS: ""
    VULKAN_DRIVERS: ""

gallium:llvm:3.9:
  extends: .build_mesa
  needs: ["llvm:3.9"]
  variables:
    BUILD: "meson"
    LLVM: "3.9"
    DRI_DRIVERS: ""
    GALLIUM_DRIVERS: "i915,etnaviv,freedreno,iris,kmsro,lima,nouveau,panfrost,r300,r600,svga,swrast,tegra,v3d,vc4,virgl"
    VULKAN_DRIVERS: "freedreno"

gallium:llvm:4.0:
  extends: .build_mesa
  needs: ["llvm:4.0"]
  variables:
    BUILD: "meson"
    LLVM: "4.0"
    DRI_DRIVERS: ""
    GALLIUM_DRIVERS: "i915,etnaviv,freedreno,iris,kmsro,lima,nouveau,panfrost,r300,r600,svga,swrast,tegra,v3d,vc4,virgl"
    VULKAN_DRIVERS: "freedreno"

gallium:llvm:5.0:
  extends: .build_mesa
  needs: ["llvm:5.0"]
  variables:
    BUILD: "meson"
    LLVM: "5.0"
    DRI_DRIVERS: ""
    GALLIUM_DRIVERS: "i915,etnaviv,freedreno,iris,kmsro,lima,nouveau,panfrost,r300,r600,svga,swrast,tegra,v3d,vc4,virgl"
    VULKAN_DRIVERS: "freedreno"

gallium:llvm:6.0:
  extends: .build_mesa
  needs: ["llvm:6.0"]
  variables:
    BUILD: "meson"
    LLVM: "6.0"
    DRI_DRIVERS: ""
    GALLIUM_DRIVERS: "i915,etnaviv,freedreno,iris,kmsro,lima,nouveau,panfrost,r300,r600,svga,swr,swrast,tegra,v3d,vc4,virgl"
    VULKAN_DRIVERS: "freedreno"

gallium:llvm:7:
  extends: .build_mesa
  needs: ["llvm:7"]
  variables:
    BUILD: "meson"
    LLVM: "7"
    DRI_DRIVERS: ""
    GALLIUM_DRIVERS: "i915,etnaviv,freedreno,iris,kmsro,lima,nouveau,panfrost,r300,r600,radeonsi,svga,swr,swrast,tegra,v3d,vc4,virgl"
    VULKAN_DRIVERS: "amd,freedreno"

gallium:llvm:8:
  extends: .build_mesa
  needs: ["llvm:8"]
  variables:
    BUILD: "meson"
    LLVM: "8"
    DRI_DRIVERS: ""
    GALLIUM_DRIVERS: "i915,etnaviv,freedreno,iris,kmsro,lima,nouveau,panfrost,r300,r600,radeonsi,svga,swr,swrast,tegra,v3d,vc4,virgl"
    VULKAN_DRIVERS: "amd,freedreno"

gallium:llvm:9:
  extends: .build_mesa
  needs: ["llvm:9"]
  variables:
    BUILD: "meson"
    LLVM: "9"
    DRI_DRIVERS: ""
    GALLIUM_DRIVERS: "i915,etnaviv,freedreno,iris,kmsro,lima,nouveau,panfrost,r300,r600,radeonsi,svga,swr,swrast,tegra,v3d,vc4,virgl"
    VULKAN_DRIVERS: "amd,freedreno"

gallium:nollvm:
  extends: .build_mesa
  needs: ["base"]
  variables:
    BUILD: "meson"
    LLVM: "0.0"
    DRI_DRIVERS: ""
    GALLIUM_DRIVERS: "i915,etnaviv,freedreno,iris,kmsro,lima,nouveau,panfrost,r300,r600,svga,swrast,tegra,v3d,vc4,virgl"
    VULKAN_DRIVERS: "freedreno"

scons:
  extends: .build_mesa
  needs: ["base"]
  variables:
    BUILD: "scons"

scons:nollvm:
  extends: .build_mesa
  needs: ["base"]
  variables:
    BUILD: "scons"
    LLVM: "0.0"

windows:
  extends: .build_mesa
  needs: ["base"]
  variables:
    BUILD: "windows"

tarball:meson:
  extends: .build_tarball
  variables:
    BUILD: "meson"
    DRI_DRIVERS: "i915,i965,nouveau,r100,r200"
    GALLIUM_DRIVERS: "etnaviv,freedreno,iris,lima,nouveau,panfrost,r300,r600,radeonsi,svga,swr,swrast,tegra,v3d,vc4,virgl"
    VULKAN_DRIVERS: "amd,freedreno,intel"

tarball:scons:
  extends: .build_tarball
  variables:
    BUILD: "scons"

tarball:windows:
  extends: .build_tarball
  variables:
    BUILD: "windows"

tests:piglit:
  extends: .build_testsuite
  variables:
    PROJECT_ID: ${PIGLIT_PROJECT_ID}

tests:gl-cts:
  extends: .build_testsuite
  variables:
    PROJECT_ID: ${VK_GL_CTS_PROJECT_ID}
    TEST_BRANCH: "test/gl/19.1"
    TEST_REFERENCE: test-gl-19-1

tests:vk-cts:
  extends: .build_testsuite
  variables:
    PROJECT_ID: ${VK_GL_CTS_PROJECT_ID}
    TEST_BRANCH: "test/vk/19.1"
    TEST_REFERENCE: test-vk-19-1

tests:crucible:
  extends: .build_testsuite
  variables:
    PROJECT_ID: ${CRUCIBLE_PROJECT_ID}

games:megaglest:
  extends: .build_game
  variables:
    GAME: "megaglest"

games:vkquake:
  extends: .build_game
  variables:
    GAME: "vkquake"
