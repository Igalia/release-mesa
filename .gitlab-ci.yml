image: docker:latest

services:
  - docker:dind

stages:
  - base
  - llvm
  - mesa
  - tests

variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  CCACHE_DIR: $CI_PROJECT_DIR/../ccache
  LLVM: "7"
  TEST_BRANCH: "test/19.1"

cache:
  paths:
    - ccache/
  key: "$CI_JOB_NAME"

before_script:
  - mkdir -p ccache
  - rm -fr ../ccache
  - mv ccache ../
  - export MAKEFLAGS=-j$(nproc)
  - apk --no-cache add libc6-compat curl jq
  - wget https://github.com/grammarly/rocker/releases/download/1.3.1/rocker-1.3.1-linux_amd64.tar.gz
  - tar xvf rocker-1.3.1-linux_amd64.tar.gz
  - rm rocker-1.3.1-linux_amd64.tar.gz
  - mv rocker ..
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY

after_script:
  - mv ../ccache ./

.build_llvm:
  stage: llvm
  cache: {}
  script:
    - DOCKERFILE_SHA256=$(cat gitlab-ci/Rockerfile.base gitlab-ci/Rockerfile.llvm | sha256sum | cut -c-64)
    - IMAGE_TAG=$CI_COMMIT_REF_SLUG-llvm-$LLVM
    - IMAGE_DOCKERFILE_SHA256=$(./gitlab-ci/inspect-remote-image.sh gitlab-ci-token $CI_BUILD_TOKEN $CI_PROJECT_PATH $IMAGE_TAG ".config.Labels[\"dockerfile.sha256\"]" || echo -n "<notfound>")
    - if [ "$DOCKERFILE_SHA256" != "$IMAGE_DOCKERFILE_SHA256" ] ; then FORCE_BUILD=true ; fi
    - if [ "$FORCE_BUILD" ] ; then ../rocker build -f gitlab-ci/Rockerfile.llvm --pull --var DOCKERFILE_SHA256=$DOCKERFILE_SHA256 --var LLVM=$LLVM ; fi
    - if [ "$FORCE_BUILD" ] ; then docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG ; fi

.build_mesa:
  stage: mesa
  script:
    - ../rocker build -f gitlab-ci/Rockerfile.mesa --pull --var BUILD=$BUILD --var LLVM=$LLVM --var DRI_DRIVERS=$DRI_DRIVERS --var GALLIUM_DRIVERS=$GALLIUM_DRIVERS --var VULKAN_DRIVERS=$VULKAN_DRIVERS .

.build_testsuite:
  stage: tests
  cache: {}
  variables:
    GIT_STRATEGY: none
  before_script: []
  after_script: []
  script:
    - apk --no-cache add curl
    - if [ "${PROJECT_ID}" ] ; then curl -X POST -F "token=${CI_JOB_TOKEN}" -F "ref=${TEST_BRANCH}" -F "variables[MESA_VERSION]=${CI_COMMIT_REF_SLUG}" https://gitlab.com/api/v4/projects/${PROJECT_ID}/trigger/pipeline ; fi

base:
  stage: base
  script:
    - DOCKERFILE_SHA256=$(cat gitlab-ci/Rockerfile.base | sha256sum | cut -c-64)
    - IMAGE_TAG=$CI_COMMIT_REF_SLUG-base
    - IMAGE_DOCKERFILE_SHA256=$(./gitlab-ci/inspect-remote-image.sh gitlab-ci-token $CI_BUILD_TOKEN $CI_PROJECT_PATH $IMAGE_TAG ".config.Labels[\"dockerfile.sha256\"]" || echo -n "<notfound>")
    - if [ "$DOCKERFILE_SHA256" != "$IMAGE_DOCKERFILE_SHA256" ] ; then FORCE_BUILD=true ; fi
    - if [ "$FORCE_BUILD" ] ; then ../rocker build -f gitlab-ci/Rockerfile.base --pull --var DOCKERFILE_SHA256=$DOCKERFILE_SHA256 ; fi
    - if [ "$FORCE_BUILD" ] ; then docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG ; fi

llvm:7:
  extends: .build_llvm
  variables:
    LLVM: "7"

meson:
  extends: .build_mesa
  variables:
    BUILD: "meson"
    DRI_DRIVERS: "i915,i965,nouveau,r100,r200"
    GALLIUM_DRIVERS: "etnaviv,freedreno,iris,kmsro,lima,nouveau,panfrost,r300,r600,radeonsi,svga,swr,swrast,v3d,vc4,virgl"
    VULKAN_DRIVERS: "amd,freedreno,intel"
  after_script:
    - mv ../ccache ./
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

tests:piglit:
  extends: .build_testsuite
  variables:
    PROJECT_ID: $PIGLIT_PROJECT_ID

tests:gl-cts:
  extends: .build_testsuite
  variables:
    PROJECT_ID: $VK_GL_CTS_PROJECT_ID
    TEST_BRANCH: "test/gl/19.1"

tests:vk-cts:
  extends: .build_testsuite
  variables:
    PROJECT_ID: $VK_GL_CTS_PROJECT_ID
    TEST_BRANCH: "test/vk/19.1"

tests:crucible:
  extends: .build_testsuite
  variables:
    PROJECT_ID: $CRUCIBLE_PROJECT_ID
